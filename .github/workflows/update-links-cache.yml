name: Update Links Cache (CSV only)

on:
  workflow_dispatch:         # allow manual run
  schedule:
    # PEAK (CET 11:30–03:30) using fixed CET=UTC+1 => UTC 10:30–02:30
    # Start partial hour (UTC 10:30, 10:50)
    - cron: "30,50 10 * * *"
    # Full peak hours (UTC 11:00–01:59) at :10,:30,:50 (20-min cadence aligned to :30)
    - cron: "10,30,50 11-23,0-1 * * *"
    # End partial hour (UTC 02:10, 02:30)
    - cron: "10,30 2 * * *"

    # OFF-PEAK every 2 hours during UTC 03:00–10:00 (i.e., CET 04:00–11:00)
    - cron: "0 4,6,8,10 * * *"

permissions:
  contents: write

concurrency:
  group: cache-updater
  cancel-in-progress: true

env:
  # ✅ CSV export URL for your sheet (add gid=... if your data is not on the first tab)
  SHEET_CSV_URL: "https://docs.google.com/spreadsheets/d/e/2PACX-1vQrWLLBApgslTFl4TalZSOJy91QGwlHQDppm0fHsUUePcnOFoYBAU_2qCGutwlhkgOrhZmYW27AtGl0/pub?gid=0&single=true&output=csv"

jobs:
  update-cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch CSV from Google Sheets
        id: fetch
        run: |
          set -e
          echo "Downloading CSV from: $SHEET_CSV_URL"
          # Retry up to 3 times with a 5-second pause between attempts
          curl --retry 3 --retry-delay 5 --fail -sSL "$SHEET_CSV_URL" -o /tmp/sheet.csv
          echo "==== First 5 lines of downloaded CSV (for debugging) ===="
          head -n 5 /tmp/sheet.csv || true
          echo "==== File size (bytes) ===="
          wc -c /tmp/sheet.csv

      - name: Convert CSV → JSON (robust parser)
        run: |
          node - <<'NODE'
          const fs = require('fs');

          // Read CSV text
          const csv = fs.readFileSync('/tmp/sheet.csv', 'utf8').replace(/\r/g, '').trim();
          if (!csv) {
            console.error('Downloaded CSV is empty.');
            process.exit(1);
          }

          // CSV parser that handles quotes and commas within quotes
          function parseCSV(text) {
            const rows = [];
            let i = 0, field = '', row = [], inQuotes = false;
            while (i < text.length) {
              const c = text[i];
              if (inQuotes) {
                if (c === '"') {
                  if (text[i+1] === '"') { field += '"'; i += 2; continue; }
                  inQuotes = false; i++; continue;
                } else {
                  field += c; i++; continue;
                }
              } else {
                if (c === '"') { inQuotes = true; i++; continue; }
                if (c === ',') { row.push(field.trim()); field = ''; i++; continue; }
                if (c === '\n') { row.push(field.trim()); rows.push(row); row = []; field = ''; i++; continue; }
                field += c; i++; continue;
              }
            }
            row.push(field.trim());
            rows.push(row);
            return rows;
          }

          const rows = parseCSV(csv);
          if (!rows.length) {
            console.error('No rows parsed from CSV.');
            process.exit(1);
          }

          // Expect headers: Text, URL (case-insensitive, tolerate extra spaces)
          const header = rows[0].map(h => h.toLowerCase().trim());
          const idxText = header.findIndex(h => h === 'text');
          const idxURL  = header.findIndex(h => h === 'url');
          if (idxText === -1 || idxURL === -1) {
            console.error('Header row must contain "Text" and "URL". Found:', header);
            process.exit(1);
          }

          const data = rows.slice(1)
            .map(r => {
              const label = (r[idxText] || '').trim();
              const url   = (r[idxURL]  || '').trim();
              return (label && url) ? { label, url } : null;
            })
            .filter(Boolean);

          if (!data.length) {
            console.error('Parsed 0 valid rows (no label+url pairs). Check your sheet data.');
            process.exit(1);
          }

          // Write JSON to repo root
          fs.writeFileSync('links-cache.json', JSON.stringify(data, null, 2));
          console.log('Wrote links-cache.json with', data.length, 'items');
          NODE

      - name: Commit and push if changed
        run: |
          if git diff --quiet links-cache.json; then
            echo "No changes to commit."
          else
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add links-cache.json
            git commit -m "Update links cache from Google Sheets (CSV)"
            git push
          fi
